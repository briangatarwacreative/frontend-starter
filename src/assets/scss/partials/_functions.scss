// Convert a string to number. Thanks to Hugo Giraudel for the solution - https://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    $_: log("Value for `to-number` should be a number or a string.");
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == ".") {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == "." {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

// Create a new map through @for to a specified value
@function create-map-through-loop($value) {
  $value-map: ();
  @for $i from 1 through $value {
    $value-map: map-merge(
      $value-map,
      (
        $i: #{$i}#{rem},
      )
    );
  }

  @return $value-map;
}

// Create bg-soft colors
@function rgba-variant($color-map, $weight) {
  $varied-colors: ();

  @each $color, $value in $color-map {
    $varied-colors: map-merge(
      $varied-colors,
      (
        $color: rgba($value, $weight),
      )
    );
  }

  @return $varied-colors;
}

// // Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map-merge($result, ("n" + $key: (-$value)));
    }
  }
  @return $result;
}
